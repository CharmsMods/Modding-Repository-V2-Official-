let searchInput;let allCards;const allAssets=[];let assetsLoadedIntoMemory=false;let loadingOverlay;let progressBar;let progressPercentage;let consoleLog;let loadingMessageDisplay;let exportOptionsPopup;let closeExportPopupButton;let exportClientButton;let exportBrowserButton;function createAndAppendCard(asset){const{folder,filename,type,mediaPath}=asset;const card=document.createElement('div');card.className='texture-card';card.style.display='block';card.style.visibility='visible';card.style.opacity='1';asset.cardElement=card;if(type.toLowerCase()==='mp3'){card.className+=' mp3';const playIcon=document.createElement('i');playIcon.className='fas fa-play media-icon';playIcon.onclick=(event)=>{event.stopPropagation();playAudio(mediaPath);};const mp3FilenameDisplay=document.createElement('div');mp3FilenameDisplay.className='mp3-filename-display';mp3FilenameDisplay.textContent=filename;const folderNumberButton=document.createElement('button');folderNumberButton.className='folder-number-button';folderNumberButton.textContent=`Folder: ${folder}`;folderNumberButton.onclick=(event)=>{event.stopPropagation();const tempInput=document.createElement('textarea');tempInput.value=folder;document.body.appendChild(tempInput);tempInput.select();document.execCommand('copy');document.body.removeChild(tempInput);folderNumberButton.textContent='Copied!';setTimeout(()=>{folderNumberButton.textContent=`Folder: ${folder}`;},2000);};const mp3ButtonsWrapper=document.createElement('div');mp3ButtonsWrapper.className='mp3-buttons-wrapper';const copyFolderButton=document.createElement('button');copyFolderButton.className='copy-folder-button';copyFolderButton.textContent='Copy Folder';copyFolderButton.onclick=(event)=>{event.stopPropagation();const tempInput=document.createElement('textarea');tempInput.value=folder;document.body.appendChild(tempInput);tempInput.select();document.execCommand('copy');document.body.removeChild(tempInput);copyFolderButton.textContent='Copied!';setTimeout(()=>{copyFolderButton.textContent='Copy Folder';},2000);};mp3ButtonsWrapper.appendChild(copyFolderButton);const downloadButton=document.createElement('button');downloadButton.className='download-button';downloadButton.textContent='Download';downloadButton.onclick=(event)=>{event.stopPropagation();const downloadLink=document.createElement('a');downloadLink.href=mediaPath;downloadLink.download=filename;downloadLink.click();};mp3ButtonsWrapper.appendChild(downloadButton);card.appendChild(playIcon);card.appendChild(mp3FilenameDisplay);card.appendChild(folderNumberButton);card.appendChild(mp3ButtonsWrapper);}else{const selectCheckbox=document.createElement('div');selectCheckbox.className='select-checkbox';selectCheckbox.innerHTML='<i class="fas fa-check"></i>';card.appendChild(selectCheckbox);card.addEventListener('click',()=>{if(typeof window.isMultiSelectModeActive==='function'&&window.isMultiSelectModeActive()){window.toggleAssetSelection(asset,card);}});const mediaContainer=document.createElement('div');mediaContainer.className='media-container';const mediaElement=document.createElement('img');mediaElement.className='media-image';mediaElement.src=mediaPath;mediaElement.onerror=()=>{console.error(`Failed to load media: ${mediaPath}`);const placeholder=document.createElement('div');placeholder.className='media-placeholder';placeholder.innerHTML=`<div class="media-icon">‚ùì</div><div class="media-filename">${filename}</div>`;mediaContainer.innerHTML='';mediaContainer.appendChild(placeholder);};mediaContainer.appendChild(mediaElement);card.appendChild(mediaContainer);const infoContainer=document.createElement('div');infoContainer.className='texture-info';const fileInfoContainer=document.createElement('div');fileInfoContainer.className='file-info';const filenameElement=document.createElement('div');filenameElement.className='texture-filename';filenameElement.textContent=filename;fileInfoContainer.appendChild(filenameElement);const folderOrArtistAlbumElement=document.createElement('div');folderOrArtistAlbumElement.className='texture-name';folderOrArtistAlbumElement.textContent=folder;fileInfoContainer.appendChild(folderOrArtistAlbumElement);infoContainer.appendChild(fileInfoContainer);const actionButtonsContainer=document.createElement('div');actionButtonsContainer.className='buttons-container';const editAssetButton=document.createElement('button');editAssetButton.className='edit-asset-button';editAssetButton.textContent='Edit Asset';editAssetButton.onclick=(event)=>{event.stopPropagation();if(typeof window.isMultiSelectModeActive==='function'&&!window.isMultiSelectModeActive()){if(typeof window.openAssetEditorModal==='function'){window.openAssetEditorModal(asset,card);}else{console.error('openAssetEditorModal function not found. Is asset-editor-modal.js loaded correctly?');}}else{console.log('Cannot open single editor in multi-select mode.');}};actionButtonsContainer.appendChild(editAssetButton);const copyButton=document.createElement('button');copyButton.className='copy-button';copyButton.textContent='Copy Folder';copyButton.onclick=(event)=>{event.stopPropagation();const tempInput=document.createElement('textarea');tempInput.value=folder;document.body.appendChild(tempInput);tempInput.select();document.execCommand('copy');document.body.removeChild(tempInput);copyButton.textContent='Copied!';setTimeout(()=>{copyButton.textContent='Copy Folder';},2000);};actionButtonsContainer.appendChild(copyButton);const downloadButton=document.createElement('button');downloadButton.className='download-button';downloadButton.textContent='Download';downloadButton.onclick=(event)=>{event.stopPropagation();const downloadLink=document.createElement('a');downloadLink.href=mediaPath;downloadLink.download=filename;downloadLink.click();};actionButtonsContainer.appendChild(downloadButton);infoContainer.appendChild(actionButtonsContainer);card.appendChild(infoContainer);}const grid=document.getElementById('texture-grid');if(grid){grid.appendChild(card);}updateCardVisualState(asset);}window.updateCardVisualState=(asset)=>{const cardElement=asset.cardElement;if(cardElement){if(asset.isModified||asset.isNew){cardElement.classList.add('edited-card');const mediaImage=cardElement.querySelector('.media-image');if(mediaImage&&(asset.modifiedImageBlob||asset.newImageBlob)){if(mediaImage.src.startsWith('blob:')){URL.revokeObjectURL(mediaImage.src);}const blobToDisplay=asset.modifiedImageBlob||asset.newImageBlob;mediaImage.src=URL.createObjectURL(blobToDisplay);}}else{cardElement.classList.remove('edited-card');const mediaImage=cardElement.querySelector('.media-image');if(mediaImage){if(mediaImage.src.startsWith('blob:')&&asset.originalImageBlob&&assetsLoadedIntoMemory){const currentBlobUrl=mediaImage.src;const originalBlobUrl=URL.createObjectURL(asset.originalImageBlob);if(currentBlobUrl!==originalBlobUrl){URL.revokeObjectURL(currentBlobUrl);mediaImage.src=originalBlobUrl;}else{URL.revokeObjectURL(originalBlobUrl);}}else if(mediaImage.src.startsWith('blob:')){URL.revokeObjectURL(mediaImage.src);mediaImage.src=asset.mediaPath;}else if(!mediaImage.src.startsWith('blob:')&&asset.originalImageBlob&&assetsLoadedIntoMemory){mediaImage.src=URL.createObjectURL(asset.originalImageBlob);}}}};function filterCards(searchTerm){const lowerSearch=searchTerm.toLowerCase();allCards.forEach(card=>{const filenameElement=card.querySelector('.texture-filename');const filename=filenameElement?filenameElement.textContent.toLowerCase():'';const mp3FilenameDisplay=card.querySelector('.mp3-filename-display');const mp3Filename=mp3FilenameDisplay?mp3FilenameDisplay.textContent.toLowerCase():'';const folderNameElement=card.querySelector('.texture-name');const folderName=folderNameElement?folderNameElement.textContent.toLowerCase():'';const folderNumberButton=card.querySelector('.folder-number-button');const folderButtonText=folderNumberButton?folderNumberButton.textContent.toLowerCase():'';if(!filename.includes(lowerSearch)&&!mp3Filename.includes(lowerSearch)&&!folderName.includes(lowerSearch)&&!folderButtonText.includes(lowerSearch)){card.style.display='none';card.style.visibility='hidden';card.style.opacity='0';}else{card.style.display='block';card.style.visibility='visible';card.style.opacity='1';}});}function clearSearch(){searchInput.value='';filterCards('');}async function initializeGallery(){try{const grid=document.getElementById('texture-grid');if(!grid){console.error('Texture grid not found!');return;}searchInput=document.getElementById('texture-search');const searchButton=document.getElementById('search-button');const clearButton=document.getElementById('clear-search-button');exportOptionsPopup=document.getElementById('export-options-popup');closeExportPopupButton=document.getElementById('close-export-popup');exportClientButton=document.getElementById('export-client-button');exportBrowserButton=document.getElementById('export-browser-button');if(!exportOptionsPopup||!closeExportPopupButton||!exportClientButton||!exportBrowserButton){console.error('One or more export options popup elements not found!');}else{closeExportPopupButton.addEventListener('click',hideExportOptionsPopup);exportClientButton.addEventListener('click',()=>initiateZipDownload('client'));exportBrowserButton.addEventListener('click',()=>initiateZipDownload('browser'));}if(searchInput&&searchButton&&clearButton){searchInput.addEventListener('input',(e)=>{filterCards(e.target.value.trim());});searchButton.addEventListener('click',()=>{filterCards(searchInput.value.trim());});clearButton.addEventListener('click',clearSearch);}else{console.error('Search elements not found!');}window.showLoadingOverlay('Loading Asset Lists...');const listFetchPromises=[];listFetchPromises.push((async()=>{try{const pngResponse=await fetch('pnglist.txt');if(!pngResponse.ok){console.error('Failed to fetch pnglist.txt');return;}const pngText=await pngResponse.text();const pngLines=pngText.trim().split('\n');for(const line of pngLines){const[folder,filename]=line.split(' ');if(folder&&filename){const mediaPath=`./mod-assets/png/${filename}`;allAssets.push({folder,filename,type:'png',mediaPath,originalImageBlob:null,modifiedImageBlob:null,newImageBlob:null,isModified:false,isNew:false});}}window.updateConsoleLog('PNG asset list loaded.');}catch(error){console.error('Error in PNG list loading process:',error);window.updateConsoleLog('[ERROR] Failed to load PNG asset list.');}})());listFetchPromises.push((async()=>{try{const jpgResponse=await fetch('jpgurl.txt');if(!jpgResponse.ok){console.error('Failed to fetch jpgurl.txt');return;}const jpgText=await jpgResponse.text();const jpgLines=jpgText.trim().split('\n');for(const line of jpgLines){const[folder,filename]=line.split(' ');if(folder&&filename){const mediaPath=`./mod-assets/jpg/${filename}`;allAssets.push({folder,filename,type:'jpg',mediaPath,originalImageBlob:null,modifiedImageBlob:null,newImageBlob:null,isModified:false,isNew:false});}}window.updateConsoleLog('JPG asset list loaded.');}catch(error){console.error('Error in JPG list loading process:',error);window.updateConsoleLog('[ERROR] Failed to load JPG asset list.');}})());listFetchPromises.push((async()=>{try{const mp3Response=await fetch('mp3list.txt');if(!mp3Response.ok){console.error('Failed to fetch mp3list.txt');return;}const mp3Text=await mp3Response.text();const mp3Lines=mp3Text.trim().split('\n');for(const line of mp3Lines){const[folder,filename]=line.split(' ');if(folder&&filename){const mediaPath=`./mod-assets/mp3/${filename}`;allAssets.push({folder,filename,type:'mp3',mediaPath,originalImageBlob:null,modifiedImageBlob:null,newImageBlob:null,isModified:false,isNew:false});}}window.updateConsoleLog('MP3 asset list loaded.');}catch(error){console.error('Error in MP3 list loading process:',error);window.updateConsoleLog('[ERROR] Failed to load MP3 asset list.');}})());await Promise.all(listFetchPromises);window.updateConsoleLog('\nAll asset lists loaded. Sorting and displaying gallery...');allAssets.sort((a,b)=>a.filename.localeCompare(b.filename));for(const asset of allAssets){createAndAppendCard(asset);}window.hideLoadingOverlayWithDelay(1000,'Gallery Ready!');allCards=document.querySelectorAll('.texture-card');}catch(error){console.error('Error initializing gallery:',error);window.updateConsoleLog(`[FATAL ERROR] Gallery initialization failed: ${error.message}`);window.hideLoadingOverlayWithDelay(3000,'Gallery Initialization Failed!');}}async function loadAllAssetsIntoMemory(){if(assetsLoadedIntoMemory){console.log('Assets already loaded into memory. Skipping pre-loading.');return;}window.showLoadingOverlay('Loading Textures into Memory...');const imageAssets=allAssets.filter(asset=>asset.type==='png'||asset.type==='jpg');let processedCount=0;const totalImageFiles=imageAssets.length;const loadPromises=imageAssets.map(async(asset)=>{if(!asset.originalImageBlob){try{window.updateConsoleLog(`Fetching blob for: ${asset.filename}`);const response=await fetch(asset.mediaPath);if(!response.ok)throw new Error(`Failed to fetch blob: ${response.statusText}`);const blob=await response.blob();asset.originalImageBlob=blob;const mediaImage=asset.cardElement.querySelector('.media-image');if(mediaImage){if(mediaImage.src.startsWith('blob:')){URL.revokeObjectURL(mediaImage.src);}mediaImage.src=URL.createObjectURL(blob);}}catch(error){console.error(`Error loading blob for ${asset.filename}:`,error);window.updateConsoleLog(`[ERROR] Failed to load blob for: ${asset.filename} - ${error.message}`);}}else{const mediaImage=asset.cardElement.querySelector('.media-image');if(mediaImage&&!mediaImage.src.startsWith('blob:')){mediaImage.src=URL.createObjectURL(asset.originalImageBlob);}}processedCount++;window.updateLoadingProgress(processedCount,totalImageFiles,`Loaded: ${asset.filename}`);});await Promise.all(loadPromises);assetsLoadedIntoMemory=true;window.updateConsoleLog('\nAll textures loaded into memory.');window.hideLoadingOverlayWithDelay(1000,'Textures Ready for Export!');}function playAudio(audioPath){const audio=new Audio(audioPath);audio.play().catch(error=>{console.error('Error playing audio:',error);console.error('Failed to play audio file. Please check if the file exists and is accessible.');window.updateConsoleLog(`[AUDIO ERROR] Failed to play: ${audioPath}`);});}window.showLoadingOverlay=(message)=>{if(loadingOverlay&&loadingMessageDisplay&&progressBar&&consoleLog){loadingMessageDisplay.textContent=message;progressBar.style.width='0%';progressPercentage.textContent='0%';consoleLog.textContent='';loadingOverlay.classList.add('active');console.log(`Loading Overlay Shown: ${message}`);}else{console.error('Loading overlay elements not found!');}};window.updateLoadingProgress=(processed,total,currentFileMessage='')=>{if(progressBar&&progressPercentage&&consoleLog){const progress=Math.round((processed/total)*100);progressBar.style.width=`${progress}%`;progressPercentage.textContent=`${progress}%`;if(currentFileMessage){consoleLog.textContent+=`Processing: ${currentFileMessage}\n`;}consoleLog.scrollTop=consoleLog.scrollHeight;}};window.updateConsoleLog=(message)=>{if(consoleLog){consoleLog.textContent+=`${message}\n`;consoleLog.scrollTop=consoleLog.scrollHeight;}};window.hideLoadingOverlayWithDelay=(delay,finalMessage='Operation Complete!')=>{if(loadingOverlay&&loadingMessageDisplay){loadingMessageDisplay.textContent=finalMessage;consoleLog.textContent+=`\n${finalMessage}\n`;consoleLog.scrollTop=consoleLog.scrollHeight;setTimeout(()=>{loadingOverlay.classList.remove('active');console.log('Loading Overlay Hidden.');},delay);}};function showExportOptionsPopup(){if(exportOptionsPopup){exportOptionsPopup.classList.add('active');}}function hideExportOptionsPopup(){if(exportOptionsPopup){exportOptionsPopup.classList.remove('active');}}async function initiateZipDownload(exportType){hideExportOptionsPopup();if(!assetsLoadedIntoMemory){window.updateConsoleLog('Assets not yet loaded into memory. Starting texture pre-loading...');await loadAllAssetsIntoMemory();window.updateConsoleLog('Texture pre-loading complete. Proceeding with ZIP generation.');}window.showLoadingOverlay(`Generating ZIP (${exportType.charAt(0).toUpperCase()+exportType.slice(1)} Export)...`);const zip=new JSZip();let baseZipPathForAssets;let fileNameForZip="mod-assets.zip";const staticFilesToFetch=['charfix.js','HowToUse.txt','init.js','manifest.json','popup.html','README.md'];if(exportType==='client'){baseZipPathForAssets="Venge Client/Resource Swapper/files/assets/";fileNameForZip="mod-client-export.zip";}else if(exportType==='browser'){baseZipPathForAssets="venge-swapper-main/files/assets/";fileNameForZip="mod-browser-export.zip";for(const staticFileName of staticFilesToFetch){try{window.updateConsoleLog(`Fetching static file: ${staticFileName}`);const staticFilePath=`./browser-static-files-for-fetch/${staticFileName}`;const response=await fetch(staticFilePath);if(!response.ok){throw new Error(`Failed to fetch ${staticFileName}: ${response.statusText}`);}const blob=await response.blob();zip.file(`venge-swapper-main/${staticFileName}`,blob);window.updateConsoleLog(`Added static file to zip: venge-swapper-main/${staticFileName}`);}catch(error){console.error(`Error adding static file ${staticFileName} to zip:`,error);window.updateConsoleLog(`[ERROR] Failed to add static file: ${staticFileName} - ${error.message}`);}}}const downloadAllZipButton=document.getElementById('download-all-zip-button');downloadAllZipButton.textContent='Preparing ZIP...';downloadAllZipButton.disabled=true;let filesProcessed=0;const totalFiles=allAssets.length;const zipPromises=allAssets.map(async(asset)=>{const{folder,filename,type,originalImageBlob,modifiedImageBlob,newImageBlob,isModified,isNew}=asset;let fileBlobToZip=null;let fileNameToZip=filename;try{if(isNew&&newImageBlob){fileBlobToZip=newImageBlob;window.updateConsoleLog(`Including NEW texture: ${filename} (Folder: ${folder})`);}else if(isModified&&modifiedImageBlob){fileBlobToZip=modifiedImageBlob;window.updateConsoleLog(`Including MODIFIED texture: ${filename} (Folder: ${folder})`);}else if(type!=='mp3'&&originalImageBlob){fileBlobToZip=originalImageBlob;window.updateConsoleLog(`Including ORIGINAL asset (cached): ${filename} (Folder: ${folder})`);}else if(type==='mp3'){window.updateConsoleLog(`Fetching MP3 asset: ${filename} (Folder: ${folder})`);const response=await fetch(asset.mediaPath);if(!response.ok){console.error(`Failed to fetch MP3 ${asset.mediaPath}: ${response.statusText}`);window.updateConsoleLog(`[ERROR] Failed to fetch MP3: ${filename}`);return null;}fileBlobToZip=await response.blob();window.updateConsoleLog(`Fetched MP3: ${filename} (Folder: ${folder})`);}else{console.warn(`No blob found for ${filename}, attempting to re-fetch as fallback.`);const response=await fetch(asset.mediaPath);if(!response.ok){console.error(`Failed to fetch original ${asset.mediaPath}: ${response.statusText}`);window.updateConsoleLog(`[ERROR] Failed to fetch original: ${filename}`);return null;}fileBlobToZip=await response.blob();if(type!=='mp3')asset.originalImageBlob=fileBlobToZip;window.updateConsoleLog(`Fetched & Including ORIGINAL asset (fallback): ${filename} (Folder: ${folder})`);}const zipPath=`${baseZipPathForAssets}${folder}/1/${fileNameToZip}`;zip.file(zipPath,fileBlobToZip);filesProcessed++;window.updateLoadingProgress(filesProcessed,totalFiles,filename);return true;}catch(error){console.error(`Error processing ${filename} for zip:`,error);window.updateConsoleLog(`[ERROR] Error processing: ${filename} - ${error.message}`);return null;}});await Promise.all(zipPromises);window.updateLoadingProgress(totalFiles,totalFiles,'All asset files added to ZIP buffer.');window.updateConsoleLog(`\nAll asset files buffered. Starting ZIP compression...\n`);try{const content=await zip.generateAsync({type:"blob",compression:"DEFLATE",compressionOptions:{level:9}},function updateCallback(metadata){if(metadata.percent>0&&metadata.percent<100){const generationProgress=Math.round(metadata.percent);progressBar.style.width=`${generationProgress}%`;progressPercentage.textContent=`${generationProgress}% (Compressing)`;}});saveAs(content,fileNameForZip);downloadAllZipButton.textContent='Download Complete!';window.hideLoadingOverlayWithDelay(3000,`ZIP file "${fileNameForZip}" downloaded successfully!`);}catch(error){console.error("Error generating or saving zip:",error);downloadAllZipButton.textContent='Download Failed!';window.hideLoadingOverlayWithDelay(3000,`Download Failed! Error: ${error.message}`);}finally{setTimeout(()=>{downloadAllZipButton.textContent='Download All as ZIP';downloadAllZipButton.disabled=false;},3000);}}document.addEventListener('DOMContentLoaded',()=>{initializeGallery();const downloadAllZipButton=document.getElementById('download-all-zip-button');loadingOverlay=document.getElementById('loading-overlay');progressBar=document.getElementById('progress-bar');progressPercentage=document.getElementById('progress-percentage');consoleLog=document.getElementById('console-log');loadingMessageDisplay=loadingOverlay?loadingOverlay.querySelector('h2'):null;if(downloadAllZipButton&&loadingOverlay&&progressBar&&progressPercentage&&consoleLog&&loadingMessageDisplay){downloadAllZipButton.removeEventListener('click',null);downloadAllZipButton.addEventListener('click',showExportOptionsPopup);}else{console.error('One or more required DOM elements for ZIP functionality not found!');if(!downloadAllZipButton)console.error('download-all-zip-button not found!');if(!loadingOverlay)console.error('loading-overlay not found!');if(!progressBar)console.error('progress-bar not found!');if(!progressPercentage)console.error('progress-percentage not found!');if(!consoleLog)console.error('console-log not found!');if(!loadingMessageDisplay)console.error('h2 for loading message not found!');}});